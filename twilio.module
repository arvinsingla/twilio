<?php

/**
 * @file
 * Twilio module
 */

/**
 * Define constants for twilio
 */
define('TWILIO_LIBRARY', 'twilio');
define('TWILIO_USER_PENDING', 1);
define('TWILIO_USER_CONFIRMED', 2);
define('TWILIO_USER_MAX_CHARS', 140);
define('TWILIO_API_VERSION', '2010-04-01');
define('TWILIO_ADMIN_PATH', 'admin/config/system/twilio');
define('TWILIO_SMS_LONG_MULTIPLE', 0);
define('TWILIO_SMS_LONG_TRUNCATE', 1);
define('TWILIO_DEFAULT_COUNTRY_CODE', 1);

/**
 * Implements hook_menu().
 */
function twilio_menu() {
  $items[TWILIO_ADMIN_PATH] = array(
    'title' => 'Twilio',
    'description' => 'Administer your twilio settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
  );
  $items[TWILIO_ADMIN_PATH . '/settings'] = array(
    'title' => 'Twilio Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[TWILIO_ADMIN_PATH . '/twiml'] = array(
    'title' => 'TwiML Manager',
    'description' => 'Manage TwiML documents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_twiml_manager_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items[TWILIO_ADMIN_PATH . '/twiml_delete/%twilio_twiml'] = array(
    'title' => 'TwiML Delete',
    'description' => 'Manage TwiML documents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_twiml_delete_confirm', 5),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => -5,
  );
  $items[TWILIO_ADMIN_PATH . '/test'] = array(
    'title' => 'Send Test SMS message',
    'description' => 'Test your Twilio SMS functionality',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_test_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['twilio/sms'] = array(
    'page callback' => 'twilio_receive_message',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['twilio/voice'] = array(
    'page callback' => 'twilio_receive_voice',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['twilio/twiml/%twilio_twiml'] = array(
    'page callback' => 'twilio_twiml_display',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function twilio_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/twilio']['page callback'] = 'twilio_user_settings';
  $callbacks['user/%user_category/edit/twilio']['module'] = 'twilio';
  $callbacks['user/%user_category/edit/twilio']['page arguments'] = array(1);
  $callbacks['user/%user_category/edit/twilio']['file'] = 'twilio.pages.inc';
  $callbacks['user/%user_category/edit/twilio']['access callback'] = array('twilio_edit_access');
}

/**
 * Implements hook_user_categories().
 */
function twilio_user_categories() {
  return array(
    array(
      'name' => 'twilio',
      'title' => t('Mobile SMS'),
      'weight' => 3,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function twilio_permission() {
  return array(
    'edit own sms number' => array(
      'title' => t('Edit own SMS number'),
      'description' => t('TODO Add a description for \'edit own sms number\''),
    ),
  );
}

/**
 * Access callback for twilio account editing.
 */
function twilio_edit_access($account) {
  return user_edit_access($account) && user_access('edit own sms number');
}

/**
 * Implements hook_libraries_info().
 */
function twilio_libraries_info() {
  $libraries['twilio'] = array(
    'name' => 'Twilio library',
    'vendor url' => 'http://www.twilio.com',
    'download url' => 'https://github.com/twilio/twilio-php/tarball/latest',
    'path' => 'Services',
    'version' => '2010-04-01',
    'files' => array(
      'php' => array(
        'Twilio.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Sends a message via Twilio.
 *
 * @param string $number
 *   The phone number of the recipient
 *
 * @param string $message
 *   The message to send to the recipient
 *
 * @param string $country
 *   The country code for the phone number
 */
function twilio_send($number, $message, $country = TWILIO_DEFAULT_COUNTRY_CODE) {
  
  switch(variable_get('twilio_long_sms', TWILIO_SMS_LONG_MULTIPLE)) {
    case TWILIO_SMS_LONG_TRUNCATE:
      // Truncate the message to 160 characters
      $message_truncated = substr($message,0,160);
      twilio_command('sendmsg', array('country' => $country, 'number' => $number, 'message' => $message_truncated));
    case TWILIO_SMS_LONG_MULTIPLE:
      // Break up the message into 160 character chunks and send multiple
      $iterator = ceil(strlen($message) / 160);
      for ($i = 0; $i < $iterator; $i++) {
        twilio_command('sendmsg', array('country' => $country, 'number' => $number, 'message' => substr($message, $i * 160, 160)));
      }
  }
}

/**
 * Validate 10 digit phone numbers. 
 *
 * @param string $number
 *   A potential phone number
 *
 * @param boolean $country_code
 *   A flag indicating if the country code should be added.
 *
 * @result
 *   A string with a properly formatted number, FALSE otherwise
 */
function twilio_validate_number($number, $country_code = TRUE) {
  // Phone number regex validation - http://www.virtuosimedia.com/dev/php/37-tested-php-perl-and-javascript-regular-expressions
  $regex = '/^((([0-9]{1})*[- .(]*([0-9]{3})[- .)]*[0-9]{3}[- .]*[0-9]{4})+)*$/';
  if (preg_match($regex, $number)) {
    // Clean up the number.
    $number = preg_replace("/[^0-9]/", '', $number);
    $number = trim($number);
    // Remove any leading zeros.
    $number = ltrim($number, '0');
    if ($country_code) {
      $index = strpos($number, '1');
      if ($index === FALSE || $index > 0) {
        $number = '1' . $number;
      }
    }
    return $number;
  }
  else {
    return FALSE;
  }
}

/**
 * Executes a command using the Twilio REST API.
 */
function twilio_command($command = 'auth', $data = array(), $config = NULL, $account = '') {

  $result = array();

  // Try to load the library and check if that worked.
  if (($library = libraries_load(TWILIO_LIBRARY)) && !empty($library['loaded'])) {

    // Set our AccountSid and AuthToken.
    $account_sid = variable_get('twilio_account');
    $auth_token = variable_get('twilio_token');

    // Twilio REST API version
    $ApiVersion = isset($config['sms_twilio_api']) && $config['sms_twilio_api'] ? $config['sms_twilio_api'] : TWILIO_API_VERSION;

      // Instantiate a new Twilio Rest Client
    switch($ApiVersion) {
      case '2010-04-01':
      // Instantiate a new Twilio Rest Client.
      $client = new Services_Twilio($account_sid, $auth_token);

        switch ($command) {
          case 'sendmsg':
            $response  = $client->account->sms_messages->create(
              variable_get('twilio_number'),
              '+' . $data['country'] . $data['number'],
              $data['message']
            );
            break;
        }
        break;
      case '2008-08-01':
        // Include the PHP TwilioRest library
        $client = new TwilioRestClient($account_sid, $auth_token);

        switch ($command) {
          case 'sendmsg':
            $response = $client->request("/$ApiVersion/Accounts/$AccountSid/SMS/Messages",
              "POST", array(
              "To" => '+' . $data['country'] . $data['number'],
              "From" => variable_get('twilio_number'),
              "Body" => $data['message'],
            ));
            break;
        }
        break;
      default:
        $result = array(
          'status' => FALSE,
          'message' => t('Invalid Twilio API: @api', array('@api', $ApiVersion)),
        );
        return $result;
    }

    watchdog('Twilio', print_r($response, TRUE));
    // Check for HTTP errors.
    if (($ApiVersion == '2008-08-01') and ($response->IsError)) {
      $result = array(
        'status' => FALSE,
        'message' => t('An error occured during the HTTP request: @error', array('@error' => $response->ErrorMessage))
      );
    } else if (($ApiVersion == '2010-04-01') and ($response->status == 'failed')) {
      $result = array(
        'status' => FALSE,
        'message' => t('An error occured during the HTTP request'),
      );
    }
    else {
      $result = array(
        'status' => TRUE,
        'data' => t('Message sent to @number', array('@number' => $data['number']))
      );
    }
  }
  else {
    $result = array(
      'status' => FALSE,
      'data' => t('The twilio library was not loaded properly')
    );
  }
  return $result;
}

/**
 * Callback for incoming messages.
 */
function twilio_receive_message() {
  if (!empty($_REQUEST['From']) && !empty($_REQUEST['Body'])) {
    $number = str_replace('+1', '', $_REQUEST['From']);
    $message = check_plain(htmlspecialchars_decode($_REQUEST['Body'], ENT_QUOTES));
    $options = array();
    if (!empty($_REQUEST['To'])) {
      $options['receiver'] = $_REQUEST['To'];
    }
    $log_message = 'An SMS message was sent from ' . $number . ' containing the message "' . $message . '"';
    watchdog('Twilio', $log_message);
    twilio_sms_incoming($number, $message, $options);
  }
}

/**
 * Invokes twilio_sms_incoming hook.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @param string $message
 *   The content of the text message.
 */
function twilio_sms_incoming($number, $message, $options = array()) {
  // Invoke a hook for the incoming message so other modules can do things with it.
  module_invoke_all('twilio_sms_incoming', $number, $message, $options);
  if (module_exists('rules')) {
    if ($account = twilio_verify_number($number, TRUE)) {
      rules_invoke_event('twilio_sms_incoming_from_user', $number, $message, $account);
    }
    rules_invoke_event('twilio_sms_incoming', $number, $message);
  }
}

/**
 * Invokes twilio_voice_incoming hook.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 */
function twilio_voice_incoming($number, $options = array()) {
  // Invoke a hook for the incoming message so other modules can do things with it.
  module_invoke_all('twilio_voice_incoming', $number, $options);
  if (module_exists('rules')) {
    rules_invoke_event('twilio_voice_incoming', $number);
  }
}

/**
 * Callback for incoming voice calls.
 */
function twilio_receive_voice() {
  if (!empty($_REQUEST['From'])) {
    $number = str_replace('+1', '', $_REQUEST['From']);
    $options = array();
    if (!empty($_REQUEST['To'])) {
      $options['receiver'] = $_REQUEST['To'];
    }
    watchdog('Twilio', 'A voice call from @number was received.', array('@number' => $number));
    twilio_voice_incoming($number, $options);
  }
}

/**
 * Implements hook_user_load().
 */
function twilio_user_load($users) {
  $result = db_select('twilio_user', 'u')
    ->fields('u', array('uid', 'country', 'number', 'status', 'code'))
    ->condition('uid', array_keys($users), 'IN')
    ->execute();
  foreach ($result as $record) {
    if (!empty($record->uid)) {
      $users[$record->uid]->twilio_user = (array) $record;
    }
  }
}

/**
 * Checks if a given phone number already exists in the database.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @result boolean
 *   TRUE if it exists, FALSE otherwise
 */
function twilio_verify_duplicate_number($number) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->execute()
    ->fetchAssoc();
  if ($result['number'] == $number) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_user_insert().
 */
function twilio_user_insert(&$edit, $account, $category) {
  twilio_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_update().
 */
function twilio_user_update(&$edit, $account, $category) {
  twilio_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_delete().
 */
function twilio_user_delete($account) {
  db_delete('twilio_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Saves mobile number data to the twilio_user table in the database.
 */
function twilio_user_save(&$edit, $account, $category) {
  if (($category == 'twilio') && isset($edit['twilio'])) {
    $number = (object) $edit['twilio'];
    $number->uid = $account->uid;

    $primary_keys = array();
    if (isset($account->twilio_user['status'])) {
      if ($account->twilio_user['status'] == TWILIO_USER_PENDING && $edit['twilio']['status'] == TWILIO_USER_CONFIRMED) {
        $primary_keys = array('uid');
      }
    }
    drupal_write_record('twilio_user', $number, $primary_keys);

    $edit['twilio']['number'] = NULL;
    $edit['twilio']['status'] = NULL;
    $edit['twilio']['code'] = NULL;
  }
}

/**
 * Implements hook_user_login().
 */
function twilio_user_login(&$edit, $account) {
  // If the users mobile number is in the verification state let them know they
  // need to enter their verification code and link to their settings page.
  if (user_access('edit own sms number') && !empty($account->twilio_user) && $account->twilio_user['status'] == 1) {
    $account_link = l(t("account settings page"), 'user/' . $account->uid . '/edit/twilio');
    drupal_set_message(t("You must confirm your phone number by entering the verification code sent to you via SMS. Go to the !link to enter your verification code.", array('!link' => $account_link)), 'warning');
  }
}

/**
 * Determines if a number is associated with a user account
 *
 * @param $number
 *   The phone number we are searching for
 * @param $return_user
 *   Boolean flag to return a user object if TRUE
 *
 * @results bool
 *   TRUE or FALSE based on query, User object if $number belongs to user and $return_user is TRUE and
 */
function twilio_verify_number($number, $return_user = FALSE) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAssoc();
  if (!empty($result['uid'])) {
    if ($return_user) {
      return user_load($result['uid']);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_FORMID_form_alter().
 */
function twilio_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if ($twilio_registration_form = variable_get('twilio_registration_form', 0)) {
    if ($twilio_registration_form == 2) {
      $required = TRUE;
    }
    else {
      $required = FALSE;
    }
    $form['account']['countrycode'] = array(
      "#type" => 'select',
      '#options' => twilio_country_codes(),
      '#title' => t('Country code'),
    );
    $form['account']['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone number'),
      '#required' => $required,
    );
    $form['#validate'][] = 'twilio_register_validate';
    $form['#submit'][] = 'twilio_register_submit';
  }
}

/**
 * Custom validation function for phone numbers during registration.
 */
function twilio_register_validate($form, &$form_state) {
  $value = $form_state['values']['number'];
  if (!is_numeric($value) || intval($value) != $value) {
    form_set_error('number', t('You must enter a valid phone number'));
  }
  elseif (twilio_verify_number($value)) {
    form_set_error('number', t('This number is already in use and cannot be assigned to more than one account'));
  }
}

/**
 * Custom submit handler for phone numbers during registration.
 */
function twilio_register_submit($form, &$form_state) {
  $account = user_load($form_state['values']['uid']);
  twilio_user_send_confirmation($account, $form_state['values']['number'], $form_state['values']['countrycode']);
}

/**
 * Send confirmation message.
 *
 * @param object $account
 *   The user object of the account to message
 *
 * @param string $number
 *   The phone number to send the message
 *
 * @param string $country
 *   The country code for the number
 *
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function twilio_user_send_confirmation($account, $number, $country) {
  $code = rand(1000, 9999);
  $data = array(
    'uid' => $account->uid,
    'number' => $number,
    'country' => $country,
    'status' => TWILIO_USER_PENDING,
    'code' => $code,
  );

  $account = user_save($account, array('twilio' => $data), 'twilio');
  $message = "Confirmation code: $code";
  twilio_send($number, $message, $country);
  return $account;
}

/**
 * Load TwiML data from the DB.
 *
 * @param $twiml_id
 *   String - The TwiML machine name to load.
 *
 * @return The TwiML data, or FALSE if none.
 */
function twilio_twiml_load($twiml_id = FALSE) {
  if (!empty($twiml_id)) {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->condition('twiml_id', $twiml_id,'=')
      ->execute()
      ->fetchAssoc();
    return $result;
  }
  return FALSE;
}

/**
 * Load TwiML data from the DB.
 *
 * @param $twiml_ids
 *   Array- An array of TwiML machine name to load.
 *
 * @return Array of TwiML documents or FALSE
 */
function twilio_twiml_load_multiple($twiml_ids = FALSE) {
  if (!empty($twiml_ids) && is_array($twiml_ids)) {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->condition('twiml_id', $twiml_ids)
      ->execute()
      ->fetchAll();
    return $result;
  }
  else {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->execute()
      ->fetchAll();
    return $result;
  }
  return FALSE;
}

/**
 * Display TwiML to the screen
 */
function twilio_twiml_display($twiml) {
  if (module_exists('php')) {
    echo php_eval($twiml['data']);
  }
  else {
    echo $twiml['data'];
  }
}

/**
 * Create a TwiML entry in the DB.
 *
 * @param $values
 *   Array - A keyed array containing all the information we need.
 *
 * @return TRUE or FALSE
 */
function twilio_twiml_create($values = FALSE) {
  // If no values, return FALSE.
  if (!$values) {
    return FALSE;
  }

  // Create the record.
  return db_insert('twilio_twiml')
    ->fields(array(
      'twiml_id' => $values['twiml_id'],
      'name' => $values['name'],
      'description' => $values['description'],
      'data' => $values['data'],
    ))
    ->execute();
}

/**
 * Update a TwiML entry in the DB.
 *
 * @param $values
 *   Array - A keyed array containing all the information we need.
 *
 * @return TRUE or FALSE
 */
function twilio_twiml_update($values = FALSE) {
  // If no values, return FALSE.
  if (!$values) {
    return FALSE;
  }

  // Create the record.
  return db_update('twilio_twiml') // Table name no longer needs {}
    ->fields(array(
      'name' => $values['name'],
      'description' => $values['description'],
      'data' => $values['data'],
    ))
    ->condition('twiml_id', $values['twiml_id'], '=')
    ->execute();
}

/**
 * Implements hook_theme
 */
function twilio_theme($existing, $type, $theme, $path) {
  return array(
    'twilio_twiml_list' => array(
      'variables' => array(
        'twiml_list' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for TwiML lists
 */
function theme_twilio_twiml_list($variables) {

  if (empty($variables['twiml_list'])) {
    return FALSE;
  }

  $rows = array();
  foreach ($variables['twiml_list'] as $row) {
    $edit = l('Edit', TWILIO_ADMIN_PATH . '/twiml/' . $row->twiml_id);
    $delete = l('Delete', TWILIO_ADMIN_PATH . '/twiml_delete/' . $row->twiml_id);
    $url = $GLOBALS['base_url'] . '/twilio/twiml/' . $row->twiml_id;
    $rows[] = array($row->name, $row->description, $url, $edit . ' | ' . $delete);
  }

  $variables = array(
    'header' => array('Name', 'Description', 'URL', 'Operations'),
    'rows' => $rows,
  );

  return theme('table', $variables);

}

/**
 * Update a TwiML entry in the DB.
 *
 * @param $twiml_id
 *   String - The machine name of the TwiML to delete.
 *
 * @return TRUE or FALSE
 */
function twilio_twiml_delete($twiml_id) {
  return db_delete('twilio_twiml')
    ->condition('twiml_id', $twiml_id)
    ->execute();
}

/**
 * Generate an options list of all TwiMLs.
 */
function twilio_twiml_options_list() {
  $twimls = array();
  foreach (array_filter(twilio_twiml_load_multiple()) as $twiml) {
    $twimls[$twiml->twiml_id] = $twiml->name;
  }
  return $twimls;
}

/**
 * Returns an array of E.164 international country calling codes
 *
 * @return array Associative array of country calling codes and country names.
 */
function twilio_country_codes() {
  return array(
    1 => "USA / Canada / Dominican Rep. / Puerto Rico",
    93 => "Afghanistan",
    355 => "Albania",
    213 => "Algeria",
    376 => "Andorra",
    244 => "Angola",
    1264 => "Anguilla",
    1268 => "Antigua & Barbuda",
    54 => "Argentina",
    374 => "Armenia",
    297 => "Aruba",
    61 => "Australia",
    43 => "Austria",
    994 => "Azerbaijan",
    1242 => "Bahamas",
    973 => "Bahrain",
    880 => "Bangladesh",
    1246 => "Barbados",
    375 => "Belarus",
    32 => "Belgium",
    501 => "Belize",
    229 => "Benin",
    1441 => "Bermuda",
    975 => "Bhutan",
    591 => "Bolivia",
    387 => "Bosnia-Herzegovina",
    267 => "Botswana",
    55 => "Brazil",
    1284 => "British Virgin Islands",
    673 => "Brunei",
    359 => "Bulgaria",
    226 => "Burkina Faso",
    257 => "Burundi",
    855 => "Cambodia",
    237 => "Cameroon",
    34 => "Canary Islands",
    238 => "Cape Verde",
    1345 => "Cayman Islands",
    236 => "Central African Republic",
    235 => "Chad",
    56 => "Chile",
    86 => "China",
    57 => "Colombia",
    269 => "Comoros",
    242 => "Congo",
    243 => "Democratic Republic Congo",
    682 => "Cook Islands",
    385 => "Croatia",
    53 => "Cuba",
    357 => "Cyprus",
    420 => "Czech Republic",
    45 => "Denmark",
    253 => "Djibouti",
    1767 => "Dominica",
    670 => "East Timor",
    593 => "Ecuador",
    20 => "Egypt",
    503 => "El Salvador",
    240 => "Equatorial Guinea",
    372 => "Estonia",
    251 => "Ethiopia",
    500 => "Falkland Islands",
    298 => "Faroe Islands",
    679 => "Fiji",
    358 => "Finland",
    33 => "France",
    594 => "French Guiana",
    689 => "French Polynesia",
    241 => "Gabon",
    220 => "Gambia",
    995 => "Georgia",
    49 => "Germany",
    233 => "Ghana",
    350 => "Gibraltar",
    881 => "Global Mobile Satellite",
    30 => "Greece",
    299 => "Greenland",
    1473 => "Grenada",
    590 => "Guadeloupe",
    1671 => "Guam",
    502 => "Guatemala",
    224 => "Guinea",
    592 => "Guyana",
    509 => "Haiti",
    504 => "Honduras",
    852 => "HongKong",
    36 => "Hungary",
    354 => "Iceland",
    91 => "India",
    62 => "Indonesia",
    98 => "Iran",
    964 => "Iraq",
    353 => "Ireland",
    972 => "Israel",
    39 => "Italy / Vatican City State",
    225 => "Ivory Coast",
    1876 => "Jamaica",
    81 => "Japan",
    962 => "Jordan",
    254 => "Kenya",
    82 => "Korea (South)",
    965 => "Kuwait",
    996 => "Kyrgyzstan",
    856 => "Lao",
    371 => "Latvia",
    961 => "Lebanon",
    266 => "Lesotho",
    231 => "Liberia",
    218 => "Libya",
    423 => "Liechtenstein",
    370 => "Lithuania",
    352 => "Luxembourg",
    853 => "Macau",
    389 => "Macedonia",
    261 => "Madagascar",
    265 => "Malawi",
    60 => "Malaysia",
    960 => "Maldives",
    223 => "Mali",
    356 => "Malta",
    596 => "Martinique",
    222 => "Mauritania",
    230 => "Mauritius",
    269 => "Mayotte Island (Comoros)",
    52 => "Mexico",
    373 => "Moldova",
    377 => "Monaco (Kosovo)",
    976 => "Mongolia",
    382 => "Montenegro",
    1664 => "Montserrat",
    212 => "Morocco",
    258 => "Mozambique",
    95 => "Myanmar",
    264 => "Namibia",
    977 => "Nepal",
    31 => "Netherlands",
    599 => "Netherlands Antilles",
    687 => "New Caledonia",
    64 => "New Zealand",
    505 => "Nicaragua",
    227 => "Niger",
    234 => "Nigeria",
    47 => "Norway",
    968 => "Oman",
    92 => "Pakistan",
    970 => "Palestine (+970)",
    9725 => "Palestine (+9725)",
    507 => "Panama",
    675 => "Papua New Guinea",
    595 => "Paraguay",
    51 => "Peru",
    63 => "Philippines",
    48 => "Poland",
    351 => "Portugal",
    974 => "Qatar",
    262 => "Reunion",
    40 => "Romania",
    7 => "Russia / Kazakhstan",
    250 => "Rwanda",
    1670 => "Saipan",
    1684 => "Samoa (American)",
    685 => "Samoa (Western)",
    378 => "San Marino",
    882 => "Satellite-Thuraya",
    966 => "Saudi Arabia",
    221 => "Senegal",
    381 => "Serbia",
    248 => "Seychelles",
    232 => "Sierra Leone",
    65 => "Singapore",
    421 => "Slovakia",
    386 => "Slovenia",
    252 => "Somalia",
    27 => "South Africa",
    34 => "Spain",
    94 => "Sri Lanka",
    1869 => "St. Kitts And Nevis",
    1758 => "St. Lucia",
    1784 => "St. Vincent",
    249 => "Sudan",
    597 => "Suriname",
    268 => "Swaziland",
    46 => "Sweden",
    41 => "Switzerland",
    963 => "Syria",
    886 => "Taiwan",
    992 => "Tajikistan",
    255 => "Tanzania",
    66 => "Thailand",
    228 => "Togo",
    676 => "Tonga Islands",
    1868 => "Trinidad and Tobago",
    216 => "Tunisia",
    90 => "Turkey",
    993 => "Turkmenistan",
    1649 => "Turks and Caicos Islands",
    256 => "Uganda",
    44 => "UK / Isle of Man / Jersey / Guernsey",
    380 => "Ukraine",
    971 => "United Arab Emirates",
    598 => "Uruguay",
    998 => "Uzbekistan",
    678 => "Vanuatu",
    58 => "Venezuela",
    84 => "Vietnam",
    967 => "Yemen",
    260 => "Zambia",
    255 => "Zanzibar",
    263 => "Zimbabwe",
  );
}
