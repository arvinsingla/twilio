<?php

/**
 * @file
 * Twilio module
 */

/**
 * Define constants for twilio
 */
define('TWILIO_LIBRARY', 'twilio');
define('TWILIO_USER_PENDING', 1);
define('TWILIO_USER_CONFIRMED', 2);
define('TWILIO_USER_MAX_CHARS', 140);
define('TWILIO_API_VERSION', '2010-04-01');
define('TWILIO_ADMIN_PATH', 'admin/config/system/twilio');
define('TWILIO_SMS_LONG_MULTIPLE', 0);
define('TWILIO_SMS_LONG_TRUNCATE', 1);
define('TWILIO_DEFAULT_COUNTRY_CODE', 1);

/**
 * Implements hook_menu().
 */
function twilio_menu() {
  $items[TWILIO_ADMIN_PATH] = array(
    'title' => 'Twilio',
    'description' => 'Administer your twilio settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
  );
  $items[TWILIO_ADMIN_PATH . '/settings'] = array(
    'title' => 'Twilio Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items[TWILIO_ADMIN_PATH . '/twiml'] = array(
    'title' => 'TwiML Manager',
    'description' => 'Manage TwiML documents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_twiml_manager_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
  );
  $items[TWILIO_ADMIN_PATH . '/twiml_delete/%twilio_twiml'] = array(
    'title' => 'TwiML Delete',
    'description' => 'Manage TwiML documents.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_twiml_delete_confirm', 5),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_CALLBACK,
    'weight' => -5,
  );
  $items[TWILIO_ADMIN_PATH . '/test'] = array(
    'title' => 'Send Test SMS message',
    'description' => 'Test your Twilio SMS functionality',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('twilio_admin_test_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'twilio.admin.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );
  $items['twilio/sms'] = array(
    'page callback' => 'twilio_receive_message',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['twilio/voice'] = array(
    'page callback' => 'twilio_receive_voice',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['twilio/twiml/%twilio_twiml'] = array(
    'page callback' => 'twilio_twiml_display',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function twilio_menu_alter(&$callbacks) {
  $callbacks['user/%user_category/edit/twilio']['page callback'] = 'twilio_user_settings';
  $callbacks['user/%user_category/edit/twilio']['module'] = 'twilio';
  $callbacks['user/%user_category/edit/twilio']['page arguments'] = array(1);
  $callbacks['user/%user_category/edit/twilio']['file'] = 'twilio.pages.inc';
  $callbacks['user/%user_category/edit/twilio']['access callback'] = array('twilio_edit_access');
}

/**
 * Implements hook_user_categories().
 */
function twilio_user_categories() {
  return array(
    array(
      'name' => 'twilio',
      'title' => t('Mobile SMS'),
      'weight' => 3,
    ),
  );
}

/**
 * Implements hook_permission().
 */
function twilio_permission() {
  return array(
    'edit own sms number' => array(
      'title' => t('Edit own number'),
      'description' => t('Edit your own phone number'),
    ),
  );
}

/**
 * Access callback for twilio account editing.
 */
function twilio_edit_access($account) {
  return user_edit_access($account) && user_access('edit own sms number');
}

/**
 * Implements hook_libraries_info().
 */
function twilio_libraries_info() {
  $libraries['twilio'] = array(
    'name' => 'Twilio library',
    'vendor url' => 'http://www.twilio.com',
    'download url' => 'https://github.com/twilio/twilio-php/tarball/latest',
    'path' => 'Services',
    'version' => '2010-04-01',
    'files' => array(
      'php' => array(
        'Twilio.php',
      ),
    ),
  );
  return $libraries;
}

/**
 * Sends a message via Twilio.
 *
 * @param string $number
 *   The phone number of the recipient
 *
 * @param string $message
 *   The message to send to the recipient
 *
 * @param string $country
 *   The country code for the phone number
 */
function twilio_send($number, $message, $country = TWILIO_DEFAULT_COUNTRY_CODE) {
  switch (variable_get('twilio_long_sms', TWILIO_SMS_LONG_MULTIPLE)) {
    case TWILIO_SMS_LONG_TRUNCATE:
      // Truncate the message to 160 characters.
      $message_truncated = substr($message, 0, 160);
      twilio_command('sendmsg', array(
        'country' => $country,
        'number' => $number,
        'message' => $message_truncated,
      ));
      break;

    case TWILIO_SMS_LONG_MULTIPLE:
      // Break up the message into 160 character chunks and send multiple.
      $iterator = ceil(strlen($message) / 160);
      for ($i = 0; $i < $iterator; $i++) {
        twilio_command('sendmsg', array(
          'country' => $country,
          'number' => $number,
          'message' => substr($message, $i * 160, 160),
        ));
      }
      break;
  }
}

/**
 * Executes a command using the Twilio REST API.
 */
function twilio_command($command = 'auth', $data = array(), $config = NULL, $account = '') {

  // Try to load the library and check if that worked.
  if (($library = libraries_load(TWILIO_LIBRARY)) && !empty($library['loaded'])) {

    // Set our account_sid, auth_token, and number.
    $account_sid = variable_get('twilio_account', FALSE);
    $auth_token = variable_get('twilio_token', FALSE);
    $number = variable_get('twilio_number', FALSE);

    // If we don't have one of our twilio variables don't bother trying to send.
    if (!$account_sid || !$auth_token || !$number) {
      return;
    }

    // Twilio REST API version.
    $api_version = !empty($config['sms_twilio_api']) ? $config['sms_twilio_api'] : TWILIO_API_VERSION;

    switch ($api_version) {
      case '2010-04-01':
        // Instantiate a new Twilio Rest Client.
        $client = new Services_Twilio($account_sid, $auth_token);

        switch ($command) {
          case 'sendmsg':
            try {
              $response  = $client->account->sms_messages->create(
                $number,
                '+' . $data['country'] . $data['number'],
                $data['message']
              );
            }
            catch (Exception $e){
              watchdog('Twilio', $e, array(), WATCHDOG_ERROR);
            }
            if ($response->status == 'failed') {
              watchdog('Twilio', 'An error occured during the HTTP request');
            }
            break;
        }
        break;

      case '2008-08-01':
        // Instantiate a new Twilio Rest Client.
        $client = new TwilioRestClient($account_sid, $auth_token);

        switch ($command) {
          case 'sendmsg':
            try {
              $response = $client->request("/$api_version/Accounts/$account_sid/SMS/Messages",
                "POST", array(
                  "To" => '+' . $data['country'] . $data['number'],
                  "From" => $number,
                  "Body" => $data['message'],
                )
              );
            }
            catch (Exception $e) {
              watchdog('Twilio', $e, array(), WATCHDOG_ERROR);
            }
            if ($response->IsError) {
              watchdog('Twilio', 'An error occured during the HTTP request: @error', array('@error' => $response->ErrorMessage));
            }
            break;
        }
        break;
    }
  }
  else {
    watchdog('Twilio', 'The twilio library was not loaded properly');
  }
}

/**
 * Callback for incoming messages.
 */
function twilio_receive_message() {
  if (!empty($_REQUEST['From']) && !empty($_REQUEST['Body'])) {
    $number = str_replace('+1', '', $_REQUEST['From']);
    $message = check_plain(htmlspecialchars_decode($_REQUEST['Body'], ENT_QUOTES));
    $options = array();
    if (!empty($_REQUEST['To'])) {
      $options['receiver'] = $_REQUEST['To'];
    }
    $log_message = 'An SMS message was sent from ' . $number . ' containing the message "' . $message . '"';
    watchdog('Twilio', $log_message);
    twilio_sms_incoming($number, $message, $options);
  }
}

/**
 * Invokes twilio_sms_incoming hook.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @param string $message
 *   The content of the text message.
 */
function twilio_sms_incoming($number, $message, $options = array()) {
  // Invoke a hook for the incoming message so other modules can do things.
  module_invoke_all('twilio_sms_incoming', $number, $message, $options);
  if (module_exists('rules')) {
    if ($account = twilio_verify_number($number, TRUE)) {
      rules_invoke_event('twilio_sms_incoming_from_user', $number, $message, $account);
    }
    rules_invoke_event('twilio_sms_incoming', $number, $message);
  }
}

/**
 * Invokes twilio_voice_incoming hook.
 *
 * @param string $number
 *   The sender's mobile number.
 */
function twilio_voice_incoming($number, $options = array()) {
  // Invoke a hook for the incoming message so other modules can do things.
  module_invoke_all('twilio_voice_incoming', $number, $options);
  if (module_exists('rules')) {
    rules_invoke_event('twilio_voice_incoming', $number);
  }
}

/**
 * Callback for incoming voice calls.
 */
function twilio_receive_voice() {
  if (!empty($_REQUEST['From'])) {
    $number = str_replace('+1', '', $_REQUEST['From']);
    $options = array();
    if (!empty($_REQUEST['To'])) {
      $options['receiver'] = $_REQUEST['To'];
    }
    watchdog('Twilio', 'A voice call from @number was received.', array('@number' => $number));
    twilio_voice_incoming($number, $options);
  }
}

/**
 * Implements hook_user_load().
 */
function twilio_user_load($users) {
  // Load data from the {twilio_user} table for the user account.
  $result = db_select('twilio_user', 'u')
    ->fields('u', array('uid', 'country', 'number', 'status', 'code'))
    ->condition('uid', array_keys($users), 'IN')
    ->execute();
  foreach ($result as $record) {
    if (!empty($record->uid)) {
      // Assign the twilio data to the user object.
      $users[$record->uid]->twilio_user = (array) $record;
    }
  }
}

/**
 * Checks if a given phone number already exists in the database.
 *
 * @param string $number
 *   The sender's mobile number.
 *
 * @result boolean
 *   TRUE if it exists, FALSE otherwise
 */
function twilio_verify_duplicate_number($number) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->execute()
    ->fetchAssoc();
  if ($result['number'] == $number) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_user_insert().
 */
function twilio_user_insert(&$edit, $account, $category) {
  twilio_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_update().
 */
function twilio_user_update(&$edit, $account, $category) {
  twilio_user_save($edit, $account, $category);
}

/**
 * Implements hook_user_delete().
 */
function twilio_user_delete($account) {
  db_delete('twilio_user')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Saves mobile number data to the {twilio_user} table in the database.
 */
function twilio_user_save(&$edit, $account, $category) {
  if (($category == 'twilio') && isset($edit['twilio'])) {
    $number = (object) $edit['twilio'];
    $number->uid = $account->uid;

    $primary_keys = array();
    if (isset($account->twilio_user['status'])) {
      if ($account->twilio_user['status'] == TWILIO_USER_PENDING && $edit['twilio']['status'] == TWILIO_USER_CONFIRMED) {
        $primary_keys = array('uid');
      }
    }
    drupal_write_record('twilio_user', $number, $primary_keys);

    $edit['twilio']['number'] = NULL;
    $edit['twilio']['status'] = NULL;
    $edit['twilio']['code'] = NULL;
  }
}

/**
 * Implements hook_user_login().
 */
function twilio_user_login(&$edit, $account) {
  // If the users mobile number is in the verification state let them know they
  // need to enter their verification code and link to their settings page.
  if (twilio_edit_access($account) && !empty($account->twilio_user) && $account->twilio_user['status'] == 1) {
    $account_link = l(t("account settings page"), 'user/' . $account->uid . '/edit/twilio');
    drupal_set_message(t("You must confirm your phone number by entering the verification code sent to you via SMS. Go to the !link to enter your verification code.", array('!link' => $account_link)), 'warning');
  }
}

/**
 * Determines if a number is associated with a user account.
 *
 * @param int $number
 *   The phone number we are searching for
 * @param bool $return_user
 *   Boolean flag to return a user object if TRUE
 *
 * @results bool
 *   TRUE or FALSE based on query
 */
function twilio_verify_number($number, $return_user = FALSE) {
  $result = db_select('twilio_user', 't')
    ->fields('t')
    ->condition('t.number', $number)
    ->condition('t.status', TWILIO_USER_CONFIRMED)
    ->execute()
    ->fetchAssoc();
  if (!empty($result['uid'])) {
    if ($return_user) {
      return user_load($result['uid']);
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_FORMID_form_alter().
 */
function twilio_form_user_register_form_alter(&$form, &$form_state, $form_id) {
  if ($twilio_registration_form = variable_get('twilio_registration_form', 0)) {
    if ($twilio_registration_form == 2) {
      $required = TRUE;
    }
    else {
      $required = FALSE;
    }
    $form['account']['countrycode'] = array(
      "#type" => 'select',
      '#options' => twilio_country_codes(),
      '#title' => t('Country code'),
    );
    $form['account']['number'] = array(
      '#type' => 'textfield',
      '#title' => t('Phone number'),
      '#required' => $required,
    );
    $form['#validate'][] = 'twilio_register_validate';
    $form['#submit'][] = 'twilio_register_submit';
  }
}

/**
 * Custom validation function for phone numbers during registration.
 */
function twilio_register_validate($form, &$form_state) {
  $value = $form_state['values']['number'];
  if (!is_numeric($value) || intval($value) != $value) {
    form_set_error('number', t('You must enter a valid phone number'));
  }
  elseif (twilio_verify_number($value)) {
    form_set_error('number', t('This number is already in use and cannot be assigned to more than one account'));
  }
}

/**
 * Custom submit handler for phone numbers during registration.
 */
function twilio_register_submit($form, &$form_state) {
  $account = user_load($form_state['values']['uid']);
  twilio_user_send_confirmation($account, $form_state['values']['number'], $form_state['values']['countrycode']);
}

/**
 * Send confirmation message.
 *
 * @param object $account
 *   The user object of the account to message
 *
 * @param string $number
 *   The phone number to send the message
 *
 * @param string $country
 *   The country code for the number
 *
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function twilio_user_send_confirmation($account, $number, $country) {
  $code = rand(1000, 9999);
  $data = array(
    'uid' => $account->uid,
    'number' => $number,
    'country' => $country,
    'status' => TWILIO_USER_PENDING,
    'code' => $code,
  );

  $account = user_save($account, array('twilio' => $data), 'twilio');
  $message = "Confirmation code: $code";
  twilio_send($number, $message, $country);
  return $account;
}

/**
 * Load TwiML data from the DB.
 *
 * @param String $twiml_id
 *   The TwiML machine name to load.
 *
 * @return array
 *   The TwiML data, or FALSE if none.
 */
function twilio_twiml_load($twiml_id = FALSE) {
  if (!empty($twiml_id)) {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->condition('twiml_id', $twiml_id, '=')
      ->execute()
      ->fetchAssoc();
    return $result;
  }
  return FALSE;
}

/**
 * Load TwiML data from the DB.
 *
 * @param array $twiml_ids
 *   An array of TwiML machine name to load.
 *
 * @return array
 *   An array of TwiML documents or FALSE
 */
function twilio_twiml_load_multiple($twiml_ids = FALSE) {
  if (!empty($twiml_ids) && is_array($twiml_ids)) {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->condition('twiml_id', $twiml_ids)
      ->execute()
      ->fetchAll();
    return $result;
  }
  else {
    $result = db_select('twilio_twiml', 't')
      ->fields('t')
      ->execute()
      ->fetchAll();
    return $result;
  }
  return FALSE;
}

/**
 * Display TwiML to the screen.
 */
function twilio_twiml_display($twiml) {
  if (module_exists('php')) {
    echo php_eval($twiml['data']);
  }
  else {
    echo $twiml['data'];
  }
}

/**
 * Create a TwiML entry in the DB.
 *
 * @param array $values
 *   A keyed array containing all the information we need.
 *
 * @return bool
 *   TRUE or FALSE
 */
function twilio_twiml_create($values = FALSE) {
  // If no values, return FALSE.
  if (!$values) {
    return FALSE;
  }

  // Create the record.
  return db_insert('twilio_twiml')
    ->fields(array(
      'twiml_id' => $values['twiml_id'],
      'name' => $values['name'],
      'description' => $values['description'],
      'data' => $values['data'],
    ))
    ->execute();
}

/**
 * Update a TwiML entry in the DB.
 *
 * @param array $values
 *   A keyed array containing all the information we need.
 *
 * @return bool
 *   TRUE or FALSE
 */
function twilio_twiml_update($values = FALSE) {
  // If no values, return FALSE.
  if (!$values) {
    return FALSE;
  }

  // Create the record.
  return db_update('twilio_twiml')
    ->fields(array(
      'name' => $values['name'],
      'description' => $values['description'],
      'data' => $values['data'],
    ))
    ->condition('twiml_id', $values['twiml_id'], '=')
    ->execute();
}

/**
 * Implements hook_theme().
 */
function twilio_theme($existing, $type, $theme, $path) {
  return array(
    'twilio_twiml_list' => array(
      'variables' => array(
        'twiml_list' => NULL,
      ),
    ),
  );
}

/**
 * Theme function for TwiML lists.
 */
function theme_twilio_twiml_list($variables) {

  if (empty($variables['twiml_list'])) {
    return FALSE;
  }

  $rows = array();
  foreach ($variables['twiml_list'] as $row) {
    $edit = l(t('Edit'), TWILIO_ADMIN_PATH . '/twiml/' . $row->twiml_id);
    $delete = l(t('Delete'), TWILIO_ADMIN_PATH . '/twiml_delete/' . $row->twiml_id);
    $url = $GLOBALS['base_url'] . '/twilio/twiml/' . $row->twiml_id;
    $rows[] = array(
      $row->name,
      $row->description,
      $url,
      $edit . ' | ' . $delete,
    );
  }

  $variables = array(
    'header' => array('Name', 'Description', 'URL', 'Operations'),
    'rows' => $rows,
  );

  return theme('table', $variables);

}

/**
 * Update a TwiML entry in the DB.
 *
 * @param int $twiml_id
 *   String - The machine name of the TwiML to delete.
 *
 * @return bool
 *   TRUE or FALSE
 */
function twilio_twiml_delete($twiml_id) {
  return db_delete('twilio_twiml')
    ->condition('twiml_id', $twiml_id)
    ->execute();
}

/**
 * Generate an options list of all TwiMLs.
 */
function twilio_twiml_options_list() {
  $twimls = array();
  foreach (array_filter(twilio_twiml_load_multiple()) as $twiml) {
    $twimls[$twiml->twiml_id] = $twiml->name;
  }
  return $twimls;
}

/**
 * Returns an array of E.164 international country calling codes.
 *
 * @param bool $all
 *   Boolean - If all possible options should be returned
 *
 * @return array
 *   Associative array of country calling codes and country names.
 */
function twilio_country_codes($all = FALSE) {
  $codes = array(
    1 => "USA / Canada / Dominican Rep. / Puerto Rico (1)",
    93 => "Afghanistan (93)",
    355 => "Albania (355)",
    213 => "Algeria (213)",
    376 => "Andorra (376)",
    244 => "Angola (244)",
    1264 => "Anguilla (1264)",
    1268 => "Antigua & Barbuda (1268)",
    54 => "Argentina (54)",
    374 => "Armenia (374)",
    297 => "Aruba (297)",
    61 => "Australia (61)",
    43 => "Austria (43)",
    994 => "Azerbaijan (994)",
    1242 => "Bahamas (1242)",
    973 => "Bahrain (973)",
    880 => "Bangladesh (880)",
    1246 => "Barbados (1246)",
    375 => "Belarus (375)",
    32 => "Belgium (32)",
    501 => "Belize (501)",
    229 => "Benin (229)",
    1441 => "Bermuda (1441)",
    975 => "Bhutan (975)",
    591 => "Bolivia (591)",
    387 => "Bosnia-Herzegovina (387)",
    267 => "Botswana (267)",
    55 => "Brazil (55)",
    1284 => "British Virgin Islands (1284)",
    673 => "Brunei (673)",
    359 => "Bulgaria (359)",
    226 => "Burkina Faso (226)",
    257 => "Burundi (257)",
    855 => "Cambodia (855)",
    237 => "Cameroon (237)",
    34 => "Canary Islands (34)",
    238 => "Cape Verde (238)",
    1345 => "Cayman Islands (1345)",
    236 => "Central African Republic (236)",
    235 => "Chad (235)",
    56 => "Chile (56)",
    86 => "China (86)",
    57 => "Colombia (57)",
    269 => "Comoros (269)",
    242 => "Congo (242)",
    243 => "Democratic Republic Congo (243)",
    682 => "Cook Islands (682)",
    385 => "Croatia (385)",
    53 => "Cuba (53)",
    357 => "Cyprus (357)",
    420 => "Czech Republic (420)",
    45 => "Denmark (45)",
    253 => "Djibouti (253)",
    1767 => "Dominica (1767)",
    670 => "East Timor (670)",
    593 => "Ecuador (593)",
    20 => "Egypt (20)",
    503 => "El Salvador (503)",
    240 => "Equatorial Guinea (240)",
    372 => "Estonia (372)",
    251 => "Ethiopia (251)",
    500 => "Falkland Islands (500)",
    298 => "Faroe Islands (298)",
    679 => "Fiji (679)",
    358 => "Finland (358)",
    33 => "France (33)",
    594 => "French Guiana (594)",
    689 => "French Polynesia (689)",
    241 => "Gabon (241)",
    220 => "Gambia (220)",
    995 => "Georgia (995)",
    49 => "Germany (49)",
    233 => "Ghana (233)",
    350 => "Gibraltar (350)",
    881 => "Global Mobile Satellite (881)",
    30 => "Greece (30)",
    299 => "Greenland (299)",
    1473 => "Grenada (1473)",
    590 => "Guadeloupe (590)",
    1671 => "Guam (1671)",
    502 => "Guatemala (502)",
    224 => "Guinea (224)",
    592 => "Guyana (592)",
    509 => "Haiti (509)",
    504 => "Honduras (504)",
    852 => "HongKong (852)",
    36 => "Hungary (36)",
    354 => "Iceland (354)",
    91 => "India (91)",
    62 => "Indonesia (62)",
    98 => "Iran (98)",
    964 => "Iraq (964)",
    353 => "Ireland (353)",
    972 => "Israel (972)",
    39 => "Italy / Vatican City State (39)",
    225 => "Ivory Coast (225)",
    1876 => "Jamaica (1876)",
    81 => "Japan (81)",
    962 => "Jordan (962)",
    254 => "Kenya (254)",
    82 => "Korea (South) (82)",
    965 => "Kuwait (965)",
    996 => "Kyrgyzstan (996)",
    856 => "Lao (856)",
    371 => "Latvia (371)",
    961 => "Lebanon (961)",
    266 => "Lesotho (266)",
    231 => "Liberia (231)",
    218 => "Libya (218)",
    423 => "Liechtenstein (423)",
    370 => "Lithuania (370)",
    352 => "Luxembourg (352)",
    853 => "Macau (853)",
    389 => "Macedonia (389)",
    261 => "Madagascar (261)",
    265 => "Malawi (265)",
    60 => "Malaysia (60)",
    960 => "Maldives (960)",
    223 => "Mali (223)",
    356 => "Malta (356)",
    596 => "Martinique (596)",
    222 => "Mauritania (222)",
    230 => "Mauritius (230)",
    269 => "Mayotte Island (Comoros) (269)",
    52 => "Mexico (52)",
    373 => "Moldova (373)",
    377 => "Monaco (Kosovo) (377)",
    976 => "Mongolia (976)",
    382 => "Montenegro (382)",
    1664 => "Montserrat (1664)",
    212 => "Morocco (212)",
    258 => "Mozambique (258)",
    95 => "Myanmar (95)",
    264 => "Namibia (264)",
    977 => "Nepal (977)",
    31 => "Netherlands (31)",
    599 => "Netherlands Antilles (599)",
    687 => "New Caledonia (687)",
    64 => "New Zealand (64)",
    505 => "Nicaragua (505)",
    227 => "Niger (227)",
    234 => "Nigeria (234)",
    47 => "Norway (47)",
    968 => "Oman (968)",
    92 => "Pakistan (92)",
    970 => "Palestine (+970)",
    9725 => "Palestine (+9725)",
    507 => "Panama (507)",
    675 => "Papua New Guinea (675)",
    595 => "Paraguay (595)",
    51 => "Peru (51)",
    63 => "Philippines (63)",
    48 => "Poland (48)",
    351 => "Portugal (351)",
    974 => "Qatar (974)",
    262 => "Reunion (262)",
    40 => "Romania (40)",
    7 => "Russia / Kazakhstan (7)",
    250 => "Rwanda (250)",
    1670 => "Saipan (1670)",
    1684 => "Samoa (American) (1684)",
    685 => "Samoa (Western) (685)",
    378 => "San Marino (378)",
    882 => "Satellite-Thuraya (882)",
    966 => "Saudi Arabia (966)",
    221 => "Senegal (221)",
    381 => "Serbia (381)",
    248 => "Seychelles (248)",
    232 => "Sierra Leone (232)",
    65 => "Singapore (65)",
    421 => "Slovakia (421)",
    386 => "Slovenia (386)",
    252 => "Somalia (252)",
    27 => "South Africa (27)",
    34 => "Spain (34)",
    94 => "Sri Lanka (94)",
    1869 => "St. Kitts And Nevis (1869)",
    1758 => "St. Lucia (1758)",
    1784 => "St. Vincent (1784)",
    249 => "Sudan (249)",
    597 => "Suriname (597)",
    268 => "Swaziland (268)",
    46 => "Sweden (46)",
    41 => "Switzerland (41)",
    963 => "Syria (963)",
    886 => "Taiwan (886)",
    992 => "Tajikistan (992)",
    255 => "Tanzania (255)",
    66 => "Thailand (66)",
    228 => "Togo (228)",
    676 => "Tonga Islands (676)",
    1868 => "Trinidad and Tobago (1868)",
    216 => "Tunisia (216)",
    90 => "Turkey (90)",
    993 => "Turkmenistan (993)",
    1649 => "Turks and Caicos Islands (1649)",
    256 => "Uganda (256)",
    44 => "UK / Isle of Man / Jersey / Guernsey (44)",
    380 => "Ukraine (380)",
    971 => "United Arab Emirates (971)",
    598 => "Uruguay (598)",
    998 => "Uzbekistan (998)",
    678 => "Vanuatu (678)",
    58 => "Venezuela (58)",
    84 => "Vietnam (84)",
    967 => "Yemen (967)",
    260 => "Zambia (260)",
    255 => "Zanzibar (255)",
    263 => "Zimbabwe (263)",
  );
  if ($all) {
    return $codes;
  }
  $codes_to_return = array_filter(variable_get('twilio_country_codes', array()));
  if (empty($codes_to_return)) {
    return $codes;
  }
  else {
    return array_intersect_key($codes, $codes_to_return);
  }
}
